[알고리즘]
1.시간이 오래걸리더라도 풀이를 보지 않고 해결하기
2.문제의 유형을 정확히 파악하여야함 (* 출제유형 파악)
3.갈피를 잡지 못하거나 너무 오래 걸리는경우 풀이를 보고 해당 문제를 파악하며, 추후 다시 풀어보아야함
4.쉬운문제를 풀기 보다는 난이도 있는문제를 30분 기준으로 푸는 연습을 하는게 더 효율적임

난이도가 있는 문제 
백준: 실버3~골드3  
프로그래머스 : 레벨 2~3


[코딩테스트]
1.쉬운문제는 간결하게 작성하되, 복잡한 문제의 경우는 주석을 필수로 작성해야함
2.문제를 읽을 때, 조건,제한사항을 꼼꼼히 읽어봐야함.

[출제유형]
문자열, 정렬, DP, 그리디, 시뮬레이션, 백트래킹 유형이 많이 출제. 

다익스트라, BFS/DFS처럼 유형이 명확하거나, 풀이가 일반화된 문제는 높은 난이도로 출제됩니다.
DP/시뮬레이션은 보통 ~ 높은 난이도로 출제됩니다.
이분탐색은 보통 ~ 높은 난이도로 출제됩니다.
그리디는 쉬운 난이도로 출제됩니다.
백트래킹은 보통 난이도로 출제됩니다.
문자열, 정렬 문제는 쉬운 난이도로 출제되지만, 시뮬레이션, DP 유형과 결합하여 출제되는 경우가 많습니다. 
스택 / 큐는 여러 유형에서 사용되지만, 스택/큐만 사용해서 풀 수 있는 문제는 많이 출제되지 않았습니다.

출제 순위
1	문자열 / 시뮬레이션 
2	백트래킹 / DP
3	그래프 / BFS/DFS
4	정렬 / 다익스트라 / 그리디
5	트리 / 기하학 / 이분탐색
6	스택 / 큐
